import asyncio
import json
import logging
import os
import re
import random
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any

from typing import Tuple
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    Message
)
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium_stealth import stealth
from selenium.common.exceptions import (
    TimeoutException,
    WebDriverException,
    NoSuchElementException  # –î–æ–±–∞–≤–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
)

OZON_LINK_RE = re.compile(r'https?://(www.)?ozon.(ru|by)/(product/|t/)[^s]+')

# =============================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =============================================

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

DATA_FILE = Path("user_data.json")
LOG_FILE = Path("user_actions.log")
MAX_URLS_PER_USER = 10
REQUEST_TIMEOUT = 20
ALLOWED_INTERVALS = [0, 1, 3, 5, 10, 24]
DEFAULT_INTERVAL = 24
INACTIVE_USER_THRESHOLD_DAYS = 30
OZON_DOMAINS = ("ru", "by")
INTERVAL_NAMES = {
    0: "–ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã",
    1: "1 —á–∞—Å",
    3: "3 —á–∞—Å–∞",
    5: "5 —á–∞—Å–æ–≤",
    10: "10 —á–∞—Å–æ–≤",
    24: "24 —á–∞—Å–∞"
}
OWNER_ID = int(os.getenv("OWNER_ID"))

bot = Bot(token=os.getenv("BOT_TOKEN"))
router = Router()

# =============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================

def log_action(user: types.User, action: str, **kwargs):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫—Ä–æ–º–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    if user.id == OWNER_ID:
        return

    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "user_id": user.id,
        "username": user.username,
        "full_name": user.full_name,
        "action": action
    }
    log_entry.update(kwargs)  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è

    try:
        if not LOG_FILE.exists():
            LOG_FILE.touch(mode=0o600)

        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")

def format_interval(interval: int) -> str:
    return INTERVAL_NAMES.get(interval, f"{interval} —á–∞—Å–æ–≤")

class Form(StatesGroup):
    add_url = State()
    remove_url = State()

class ProductMenu:
    @staticmethod
    def get_main_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"), KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")],
                [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
                [KeyboardButton(text="‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True
        )

    @staticmethod
    def get_check_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")],
                [KeyboardButton(text="‚è∏Ô∏è –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"), KeyboardButton(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")],
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )

    @staticmethod
    def get_interval_menu():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã")],
                [KeyboardButton(text="1 —á–∞—Å"), KeyboardButton(text="3 —á–∞—Å–∞")],
                [KeyboardButton(text="5 —á–∞—Å–æ–≤"), KeyboardButton(text="10 —á–∞—Å–æ–≤")],
                [KeyboardButton(text="24 —á–∞—Å–∞"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )

    @staticmethod
    def get_back_button():
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )

    @staticmethod
    def get_remove_menu(urls: List[str], product_names: Dict[str, str]):
        buttons = []
        for i, url in enumerate(urls, 1):
            name = product_names.get(url, f"–¢–æ–≤–∞—Ä {i}")
            short_name = (name[:20] + "...") if len(name) > 20 else name
            buttons.append([KeyboardButton(text=f"üóëÔ∏è {i}. {short_name}")])
        buttons.append([KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã")])
        buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
        return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

async def show_animation(msg: Message, text: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    for emoji in ["üîÑ", "‚è≥", "üåÄ"]:
        await msg.edit_text(f"{emoji} {text}")
        await asyncio.sleep(0.2)
    await msg.edit_text(text)

async def delete_messages(chat_id: str, message_ids: list):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id, msg_id)
            await asyncio.sleep(0.1)
        except TelegramBadRequest as e:
            if "message to delete not found" not in str(e):
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")

async def animate_success(msg: Message):
    """–ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ë–ï–ó —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        for emoji in ["‚ú®", "üåü", "üí´", "üéâ"]:
            try:
                await msg.edit_text(f"{emoji} {msg.html_text}")
                await asyncio.sleep(0.3)
            except TelegramBadRequest as e:
                if "message to edit not found" in str(e):
                    return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")

def truncate(text: str, max_length: int) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
    return (text[:max_length] + '...') if len(text) > max_length else text

async def show_main_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ProductMenu.get_main_menu()
    )

async def update_skus():
    logger.info("=== –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ ===")
    for chat_id in user_data:
        user_info = user_data[chat_id]
        urls = user_info.get('urls', [])
        if not urls:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º —Å–ø–∏—Å–∫–æ–º
        try:
            products_data = await batch_fetch_products(urls)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            continue

        updated_skus = {}
        for url in urls:
            name, prices, new_full_sku, is_out_of_stock = products_data.get(url, (None, {}, None, True))
            if new_full_sku:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞—Ä—Ç–∏–∫—É–ª
                for old_sku in list(user_info.get('skus', {})):
                    if user_info['skus'][old_sku] == url:
                        del user_info['skus'][old_sku]
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
                updated_skus[new_full_sku] = url

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_info['skus'].update(updated_skus)
        save_user_data()

    logger.info("=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")


def normalize_ozon_url(url: str) -> str:
    """–ü—Ä–∏–≤–æ–¥–∏—Ç ozon-—Å—Å—ã–ª–∫—É –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É (–±–µ–∑ www –∏ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"""
    url = url.lower().split('?')[0].replace('www.', '')
    return url

def is_duplicate(url: str, full_sku: str, user_info: dict) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (full_sku) –∏ –ø–æ url.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª—å, –∏–Ω–∞—á–µ None.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (full_sku)
    if full_sku and 'skus' in user_info and full_sku in user_info['skus']:
        exist_url = user_info['skus'][full_sku]
        return f"‚úîÔ∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è:\n{exist_url}"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –ø–æ url (–¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏)
    norm_url = normalize_ozon_url(url)
    for u in user_info.get('urls', []):
        if normalize_ozon_url(u) == norm_url:
            return f"‚úîÔ∏è –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω:\n{u}"
    return None

# =============================================
# –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò
# =============================================

def migrate_user_data(data: dict) -> dict:
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    migrated = {}
    for chat_id, user_info in data.items():
        migrated[chat_id] = {
            'urls': user_info.get('urls', []),
            'previous_prices': user_info.get('previous_prices', {}),
            'product_names': user_info.get('product_names', {}),
            'skus': user_info.get('skus', {}),  # –ù–æ–≤–æ–µ –ø–æ–ª–µ: {–∞—Ä—Ç–∏–∫—É–ª: url}
            'last_active': user_info.get('last_active', datetime.now().isoformat()),
            'interval': user_info.get('interval', DEFAULT_INTERVAL),
            'last_check': user_info.get('last_check', None),
            'is_tracking': user_info.get('is_tracking', True)
        }
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'skus' not in user_info:
            migrated[chat_id]['skus'] = {}
            for url in user_info.get('urls', []):
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ URL
                match = re.search(r'/product/(\d+)/', url)
                if match:
                    migrated[chat_id]['skus'][match.group(1)] = url
    return migrated


def load_user_data() -> Dict[str, Any]:
    if DATA_FILE.exists():
        try:
            with open(DATA_FILE, "r", encoding='utf-8') as f:
                return migrate_user_data(json.load(f))
        except (json.JSONDecodeError, UnicodeDecodeError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    return {}

def save_user_data():
    try:
        with open(DATA_FILE, "w", encoding='utf-8') as f:
            json.dump(user_data, f, indent=2, ensure_ascii=False)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

user_data = load_user_data()

# =============================================
# WEBDRIVER –ò –†–ê–ë–û–¢–ê –° OZON
# =============================================

def setup_driver() -> webdriver.Chrome:
    options = webdriver.ChromeOptions()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--log-level=3")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    driver = webdriver.Chrome(options=options)
    stealth(
        driver,
        languages=["en-US", "en"],
        vendor="Google Inc.",
        platform="Win32",
        webgl_vendor="Intel Inc.",
        renderer="Intel Iris OpenGL Engine",
        fix_hairline=True,
    )
    return driver

def clean_price(price_text: str) -> Optional[int]:
    try:
        return int(re.sub(r"[^\d]", "", price_text))
    except (ValueError, TypeError, AttributeError):
        return None

async def batch_fetch_products(urls: List[str]) -> Dict[str, Tuple[Optional[str], Dict[int, int], Optional[str], bool]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ URL –∑–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –¥—Ä–∞–π–≤–µ—Ä–∞"""
    result = {}

    def sync_fetch():
        driver = setup_driver()
        try:
            for url in urls:
                try:
                    driver.get(url)
                    WebDriverWait(driver, 15).until(
                        lambda d: d.current_url.startswith("https://www.ozon.") or
                                  d.current_url.startswith("https://ozon.")
                    )

                    # –ö–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ç–æ–≤–∞—Ä
                    is_out_of_stock = False
                    try:
                        WebDriverWait(driver, 5).until(
                            EC.presence_of_element_located((By.XPATH, '//*[contains(text(), "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")]'))
                        )
                        is_out_of_stock = True
                    except Exception:
                        pass

                    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª
                    full_sku = None
                    try:
                        sku_elem = driver.find_element(By.XPATH, '//*[@data-widget="webDetailSKU"]')
                        match = re.search(r'–ê—Ä—Ç–∏–∫—É–ª:\s*(\S+)', sku_elem.text.strip())
                        full_sku = match.group(1) if match else None
                    except Exception:
                        pass

                    # –¶–µ–Ω—ã
                    prices = {}
                    try:
                        price_elems = WebDriverWait(driver, 10).until(
                            EC.presence_of_all_elements_located((By.XPATH, '//*[@data-widget="webPrice"]//span[contains(text(),"‚ÇΩ")]'))
                        )
                        for i, elem in enumerate(price_elems[:2], 1):
                            price = clean_price(elem.text)
                            if price is not None:
                                prices[i] = price
                    except Exception:
                        pass

                    # –ù–∞–∑–≤–∞–Ω–∏–µ
                    name = None
                    try:
                        heading_elem = WebDriverWait(driver, 7).until(
                            EC.visibility_of_element_located((By.XPATH, '//*[@data-widget="webProductHeading"]//h1'))
                        )
                        name = heading_elem.text.strip()
                    except Exception:
                        pass

                    result[url] = (name, prices, full_sku, is_out_of_stock)
                    if driver.current_url != url and "captcha" in driver.current_url:
                        raise Exception("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {str(e)}")
                    result[url] = (None, {}, None, True)
                    continue
        finally:
            try:
                driver.quit()
            except:
                pass
        return result

    return await asyncio.to_thread(sync_fetch)

# =============================================
# –û–ë–†–ê–ë–û–¢–ö–ê –¶–ï–ù –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# =============================================

def get_price_display(prices: Dict[int, int]) -> str:
    card_price = prices.get(1, '–Ω/–¥')
    regular_price = prices.get(2, card_price if card_price != '–Ω/–¥' else '–Ω/–¥')
    return f"{card_price:,} / {regular_price:,}".replace(",", " ") if isinstance(card_price, int) else "–Ω/–¥"

def generate_product_list(user_info: dict) -> str:
    response = ["üìã <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>"]
    for i, url in enumerate(user_info['urls'], 1):
        product_name = user_info['product_names'].get(url)
        prices = user_info['previous_prices'].get(url, {})
        price_display = get_price_display(prices)

        if not product_name:
            product_id = re.search(r'(product/|t/)([^/]+)', url)
            product_name = f"–¢–æ–≤–∞—Ä {i} (ID: {product_id.group(2)[:20]}...)" if product_id else f"–¢–æ–≤–∞—Ä {i}"
        else:
            product_name = product_name[:50] + "..." if len(product_name) > 50 else product_name

        response.append(f"{i}. <a href='{url}'>{product_name}</a> (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {price_display}‚ÇΩ)")

    response.append(f"\n–í—Å–µ–≥–æ: {len(user_info['urls'])}/{MAX_URLS_PER_USER}")
    return "\n".join(response)

def compare_prices(previous: Optional[Dict[int, int]], current: Dict[int, int]) -> List[str]:
    changes = []
    price_names = {1: "–ø–æ –∫–∞—Ä—Ç–µ", 2: "–æ–±—ã—á–Ω–∞—è"}

    if previous:
        for idx in current:
            prev_price = previous.get(idx)
            curr_price = current[idx]
            if prev_price is None:
                changes.append(f"‚Ä¢ –¶–µ–Ω–∞ {price_names[idx]} –¥–æ–±–∞–≤–ª–µ–Ω–∞: {curr_price:,}‚ÇΩ".replace(",", " "))
            elif curr_price != prev_price:
                diff = abs(curr_price - prev_price)
                if curr_price > prev_price:
                    changes.append(f"‚Ä¢ –¶–µ–Ω–∞ {price_names[idx]} ‚Üó {curr_price:,}‚ÇΩ (+{diff:,}‚ÇΩ".replace(",", " "))
                else:
                    changes.append(f"‚Ä¢ –¶–µ–Ω–∞ {price_names[idx]} ‚Üò {curr_price:,}‚ÇΩ (-{diff:,}‚ÇΩ".replace(",", " "))
            else:
                changes.append(f"‚Ä¢ –¶–µ–Ω–∞ {price_names[idx]} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    else:
        changes.append("‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω")
    return changes

async def check_prices(chat_id: str, force_notify: bool = False):
    user_info = user_data.get(chat_id)
    if not user_info or not user_info.get('urls') or not user_info.get('is_tracking', True):
        return

    products_data = await batch_fetch_products(user_info['urls'])

    for url in user_info['urls']:
        name, prices, full_sku, is_out_of_stock = products_data.get(url, (None, {}, None, True))
        if not name or not prices or is_out_of_stock:
            continue

        user_info['product_names'][url] = name
        previous = user_info['previous_prices'].get(url, {})
        changes = compare_prices(previous, prices)
        user_info['previous_prices'][url] = prices

        # --- –ì–ª–∞–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è "–ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã" ---
        if user_info['interval'] == 0 and not force_notify:
            only_first_check = len(changes) == 1 and changes[0].startswith("‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω")
            only_no_change = all(
                (("–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å" in line) or ("–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω" in line)) for line in changes
            )
            if only_first_check or only_no_change:
                continue

        if not force_notify and len(changes) == 1 and changes[0] == "‚Ä¢ –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω":
            continue

        card_price = prices.get(1, '–Ω/–¥')
        regular_price = prices.get(2, card_price if card_price != '–Ω/–¥' else '–Ω/–¥')
        interval_text = (
            "üîî –†–µ–∂–∏–º: –ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã" if user_info['interval'] == 0 else
            f"‚è±Ô∏è –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {(datetime.now() + timedelta(hours=user_info['interval'])).strftime('%H:%M %d.%m.%Y')}"
        )

        result = (
            f"üõçÔ∏è <b>{name}</b>\n"
            f"üí≥ {card_price:,}‚ÇΩ | üõí {regular_price:,}‚ÇΩ\n".replace(",", " ") +
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {full_sku}\n"
            f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n"
            f"üìÖ {datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
            f"{interval_text}\n"
            f"\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n" + "\n".join(changes)
        )

        try:
            await bot.send_message(
                chat_id,
                result,
                disable_web_page_preview=True,
                parse_mode="HTML",
                reply_markup=ProductMenu.get_main_menu()
            )
            await asyncio.sleep(1)
        except TelegramForbiddenError:
            del user_data[chat_id]
            save_user_data()
            break
        except TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    user_info['last_active'] = datetime.now().isoformat()
    save_user_data()

# =============================================
# –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================================

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    chat_id = str(message.chat.id)
    log_action(message.from_user, "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if chat_id not in user_data:
        user_data[chat_id] = {
            'urls': [],
            'previous_prices': {},
            'product_names': {},
            'last_active': datetime.now().isoformat(),
            'interval': DEFAULT_INTERVAL,
            'last_check': None,
            'is_tracking': True
        }
        save_user_data()

    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ozon Price Tracker!</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=ProductMenu.get_main_menu()
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message, state: FSMContext):
    log_action(message.from_user, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=ProductMenu.get_main_menu()
    )

@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    log_action(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–º–æ—â–∏")
    help_text = (
        "üõçÔ∏è <b>Ozon Price Tracker - –ü–æ–º–æ—â—å</b>\n\n"
        "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å Ozon\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n\n"

        "üîß <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:</b>\n"
        "   - –ù–∞–∂–º–∏—Ç–µ ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Ozon\n"
        "   –ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
        "   <code>https://ozon.ru/product/123</code>\n"
        "   <code>https://ozon.by/t/AbcDeF</code>\n\n"

        "2. <b>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:</b>\n"
        "   - –ù–∞–∂–º–∏—Ç–µ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "   - –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö: üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã\n\n"

        "3. <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:</b>\n"
        "   - ‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ - –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö\n"
        "   - üîî –†–µ–∂–∏–º '–ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã': –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∫–∞–∂–¥—ã–π —á–∞—Å "
        "–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n\n"

        "4. <b>–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>\n"
        "   - üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ‚Üí üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\n"
        "   - –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞\n\n"

        "5. <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º:</b>\n"
        "   - ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "   - ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å: –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n"

        "üìù <b>–í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:</b>\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤: {MAX_URLS_PER_USER}\n"
        "‚Ä¢ –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è\n"
        "‚Ä¢ –ë–æ—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏\n\n"

        "üÜò <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        "‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞\n"
        "‚Ä¢ –ü—Ä–æ–ø–∞–ª–∏ —Ç–æ–≤–∞—Ä—ã: –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ\n"
        "‚Ä¢ –ü–∏—à–∏—Ç–µ: @matrix_is_the_first_step"
    )
    await message.answer(
        help_text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=ProductMenu.get_main_menu()
    )

@router.message(F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
async def check_menu(message: types.Message):
    log_action(message.from_user, "–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–æ–≤–µ—Ä–∫–∏")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ProductMenu.get_check_menu())

@router.message(Command("list"))
@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def list_urls(message: types.Message):
    log_action(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    chat_id = str(message.chat.id)
    if chat_id not in user_data or not user_data[chat_id].get('urls'):
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", reply_markup=ProductMenu.get_main_menu())
        return

    product_list = generate_product_list(user_data[chat_id])
    await message.answer(
        product_list,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=ProductMenu.get_main_menu()
    )

# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–û–í
# =============================================

@router.message(Command("add"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_url_command(message: types.Message, state: FSMContext):
    log_action(message.from_user, "–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
    chat_id = str(message.chat.id)
    if chat_id not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start", reply_markup=ProductMenu.get_main_menu())
        return

    user_info = user_data[chat_id]
    if len(user_info['urls']) >= MAX_URLS_PER_USER:
        await message.answer(f"‚ùå –õ–∏–º–∏—Ç {MAX_URLS_PER_USER} —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=ProductMenu.get_main_menu())
        return

    await state.set_state(Form.add_url)
    await message.answer(
        "üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Ozon –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç—É:\n\n",
        reply_markup=ProductMenu.get_back_button()
    )

@router.message(Form.add_url)
async def add_url_state(message: types.Message, state: FSMContext):
    user = message.from_user
    chat_id = str(message.chat.id)
    user_info = user_data.get(chat_id, {})
    temp_messages = []

    try:
        temp_messages.append(message.message_id)
        loading_msg = await message.answer("‚è≥ <i>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏...</i>", parse_mode="HTML")
        temp_messages.append(loading_msg.message_id)

        url = message.text.strip()
        if url.startswith('ozon.ru/t/'):
            url = 'https://' + url  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º https
        log_action(user, "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", product_url=url)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
        await loading_msg.edit_text("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏...</i>", parse_mode="HTML")
        await asyncio.sleep(0.5)
        if not re.match(r'^https?://(www\.)?ozon\.(ru|by)/(product/|t/)', url):
            await show_animation(loading_msg, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
        await loading_msg.edit_text("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...</i>", parse_mode="HTML")
        products_data = await batch_fetch_products([url])
        name, prices, full_sku, is_out_of_stock = products_data.get(url, (None, {}, None, True))

        if not all([name, prices, full_sku]):
            await show_animation(loading_msg, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        if not full_sku:
            await show_animation(loading_msg, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—å –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (full_sku) –∏ url
        dupe_reason = is_duplicate(url, full_sku, user_info)
        if dupe_reason:
            await show_animation(loading_msg, dupe_reason)
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞
        await loading_msg.edit_text("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞...</i>", parse_mode="HTML")
        if is_out_of_stock:
            await show_animation(loading_msg, "üö´ –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        if not name or not prices:
            await show_animation(loading_msg, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        user_info.setdefault('urls', []).append(url)
        user_info.setdefault('product_names', {})[url] = name
        user_info.setdefault('previous_prices', {})[url] = prices
        user_info.setdefault('skus', {})[full_sku] = url
        user_info['last_active'] = datetime.now().isoformat()
        save_user_data()

        success_text = (
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
            f"üè∑ {name}\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{full_sku}</code>\n"
            f"üíµ {get_price_display(prices)}‚ÇΩ\n"
            f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n"
            f"‚è±Ô∏è –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: {format_interval(user_info.get('interval', DEFAULT_INTERVAL))}"
        )

        success_msg = await message.answer(
            success_text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=ProductMenu.get_main_menu()
        )

        await animate_success(success_msg)
        await delete_messages(chat_id, temp_messages)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await delete_messages(chat_id, temp_messages)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=ProductMenu.get_main_menu())
    finally:
        await state.clear()



# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–î–ê–õ–ï–ù–ò–Ø –¢–û–í–ê–†–û–í
# =============================================

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def remove_url_menu(message: types.Message, state: FSMContext):
    log_action(message.from_user, "–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è")
    chat_id = str(message.chat.id)
    user_info = user_data.get(chat_id)

    if not user_info or not user_info.get('urls'):
        await message.answer("‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!", reply_markup=ProductMenu.get_main_menu())
        return

    product_list = generate_product_list(user_info)
    await message.answer(
        product_list,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ProductMenu.get_remove_menu(
            user_info['urls'],
            user_info['product_names']
        )
    )
    await state.set_state(Form.remove_url)

@router.message(F.text.startswith("üóëÔ∏è"))
async def handle_remove_actions(message: types.Message, state: FSMContext):
    user = message.from_user
    if message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –í–°–ï —Ç–æ–≤–∞—Ä—ã":
        log_action(user, "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        await remove_all_products(message, state)
    elif re.match(r"^üóëÔ∏è\s*\d+\.", message.text):
        log_action(user, "–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        await remove_single_product(message, state)
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!", reply_markup=ProductMenu.get_main_menu())

async def remove_single_product(message: types.Message, state: FSMContext):
    user = message.from_user
    chat_id = str(message.chat.id)
    user_info = user_data.get(chat_id)

    if not user_info or not user_info.get('urls'):
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=ProductMenu.get_main_menu())
        return

    match = re.search(r"(\d+)", message.text)
    if not match:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞!",
                           reply_markup=ProductMenu.get_remove_menu(
                               user_info['urls'],
                               user_info['product_names']
                           ))
        return

    try:
        product_num = int(match.group(1))
        if 1 <= product_num <= len(user_info['urls']):
            removed_url = user_info['urls'].pop(product_num - 1)

            # –£–¥–∞–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ (–∞—Ä—Ç–∏–∫—É–ª = –∫–ª—é—á, url = –∑–Ω–∞—á–µ–Ω–∏–µ)
            sku_to_delete = None
            for sku, url in list(user_info['skus'].items()):
                if url == removed_url:
                    sku_to_delete = sku
                    break
            if sku_to_delete:
                del user_info['skus'][sku_to_delete]

            product_name = user_info['product_names'].get(removed_url, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            user_info['previous_prices'].pop(removed_url, None)
            user_info['product_names'].pop(removed_url, None)
            user_info['last_active'] = datetime.now().isoformat()
            save_user_data()

            log_action(
                user=user,
                action="–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω",
                product_name=product_name,
                product_url=removed_url,
                sku=sku
            )
            await message.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!", reply_markup=ProductMenu.get_main_menu())
            await state.clear()
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!",
                               reply_markup=ProductMenu.get_remove_menu(
                                   user_info['urls'],
                                   user_info['product_names']
                               ))
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞!",
                           reply_markup=ProductMenu.get_remove_menu(
                               user_info['urls'],
                               user_info['product_names']
                           ))

async def remove_all_products(message: types.Message, state: FSMContext):
    user = message.from_user
    chat_id = str(message.chat.id)
    user_info = user_data.get(chat_id)

    if not user_info or not user_info.get('urls'):
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", reply_markup=ProductMenu.get_main_menu())
        return

    user_info['urls'].clear()
    user_info['previous_prices'].clear()
    user_info['product_names'].clear()
    user_info['skus'].clear()  # <--- –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ!
    user_info['last_active'] = datetime.now().isoformat()
    save_user_data()

    log_action(user, "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
    await message.answer("‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã!", reply_markup=ProductMenu.get_main_menu())
    await state.clear()

# =============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–¢–ï–†–í–ê–õ–ê –ü–†–û–í–ï–†–ö–ò
# =============================================

@router.message(Command("setinterval"))
@router.message(F.text == "‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏")
async def set_interval_menu(message: types.Message):
    log_action(message.from_user, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    chat_id = str(message.chat.id)
    if chat_id not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start", reply_markup=ProductMenu.get_main_menu())
        return
    await message.answer("üïí –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:", reply_markup=ProductMenu.get_interval_menu())

@router.message(F.text.in_(INTERVAL_NAMES.values()))
async def set_interval_value(message: types.Message):
    user = message.from_user
    chat_id = str(message.chat.id)
    if chat_id not in user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start", reply_markup=ProductMenu.get_main_menu())
        return

    interval = next(k for k, v in INTERVAL_NAMES.items() if v == message.text)
    user_data[chat_id]['interval'] = interval
    user_data[chat_id]['last_active'] = datetime.now().isoformat()
    save_user_data()

    log_action(user, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª: {format_interval(interval)}")
    response = ("‚úÖ –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: –ü–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
                if interval == 0 else
                f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {format_interval(interval)}")
    await message.answer(response, reply_markup=ProductMenu.get_main_menu())

# =============================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# =============================================

@router.message(Command("check"))
@router.message(F.text == "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å")
async def manual_check(message: types.Message):
    log_action(message.from_user, "–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω")
    chat_id = str(message.chat.id)
    if chat_id not in user_data or not user_data[chat_id].get('urls'):
        await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!", reply_markup=ProductMenu.get_main_menu())
        return

    msg = await message.answer("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", parse_mode="HTML")
    user_data[chat_id]['last_active'] = datetime.now().isoformat()
    save_user_data()

    await check_prices(chat_id, force_notify=True)
    user_data[chat_id]['last_check'] = datetime.now().isoformat()
    save_user_data()

    try: await bot.delete_message(chat_id, msg.message_id)
    except: pass

@router.message(Command("stats"))
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    log_action(message.from_user, "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    chat_id = str(message.chat.id)
    if chat_id not in user_data:
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã!", reply_markup=ProductMenu.get_main_menu())
        return

    user_info = user_data[chat_id]
    interval = user_info.get('interval', DEFAULT_INTERVAL)
    last_check = user_info.get('last_check')
    tracking_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if user_info.get('is_tracking', True) else "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    stats_message = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {tracking_status}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {format_interval(interval)}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check[:16] if last_check else '–µ—â–µ –Ω–µ –±—ã–ª–æ'}\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä–æ–≤: {len(user_info.get('urls', []))}\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤: {MAX_URLS_PER_USER}"
    )
    await message.answer(stats_message, parse_mode="HTML", reply_markup=ProductMenu.get_main_menu())

@router.message(Command("logs"))
async def send_logs(message: types.Message):
    if message.from_user.id != OWNER_ID:
        return

    try:
        with open(LOG_FILE, "rb") as f:
            await message.answer_document(
                types.BufferedInputFile(
                    f.read(),
                    filename="user_actions.log"
                ),
                caption="üìÅ –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}")

@router.message(F.text.regexp(r'^https?://(www\.)?ozon\.(ru|by)/(product/|t/)'))
async def handle_direct_link(message: types.Message):
    chat_id = str(message.chat.id)
    user = message.from_user
    user_info = user_data.get(chat_id)
    temp_messages = []

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text:
            await message.answer("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞")
            return

        url = message.text.strip()
        if url.startswith('ozon.ru/t/'):
            url = 'https://' + url
        temp_messages.append(message.message_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_info:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                               reply_markup=ProductMenu.get_main_menu())
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤
        if len(user_info['urls']) >= MAX_URLS_PER_USER:
            await message.answer(f"‚ùå –õ–∏–º–∏—Ç {MAX_URLS_PER_USER} —Ç–æ–≤–∞—Ä–æ–≤!",
                               reply_markup=ProductMenu.get_main_menu())
            return

        loading_msg = await message.answer("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏...</i>", parse_mode="HTML")
        temp_messages.append(loading_msg.message_id)

        log_action(user, "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞)", product_url=url)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Ä–æ—É—Ç–µ—Ä–µ

        await loading_msg.edit_text("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...</i>", parse_mode="HTML")
        products_data = await batch_fetch_products([url])
        name, prices, full_sku, is_out_of_stock = products_data.get(url, (None, {}, None, True))

        if not full_sku:
            await show_animation(loading_msg, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞!
        dupe_reason = is_duplicate(url, full_sku, user_info)
        if dupe_reason:
            await show_animation(loading_msg, dupe_reason)
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞
        await loading_msg.edit_text("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞...</i>", parse_mode="HTML")
        if is_out_of_stock:
            await show_animation(loading_msg, "üö´ –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        if not name or not prices:
            await show_animation(loading_msg, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
            await delete_messages(chat_id, temp_messages)
            return await show_main_menu(message)

        # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        user_info.setdefault('urls', []).append(url)
        user_info.setdefault('product_names', {})[url] = name
        user_info.setdefault('previous_prices', {})[url] = prices
        user_info.setdefault('skus', {})[full_sku] = url
        user_info['last_active'] = datetime.now().isoformat()
        save_user_data()

        success_text = (
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
            f"üè∑ {name}\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{full_sku}</code>\n"
            f"üíµ {get_price_display(prices)}‚ÇΩ\n"
            f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n"
            f"‚è±Ô∏è –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: {format_interval(user_info.get('interval', DEFAULT_INTERVAL))}"
        )

        success_msg = await message.answer(
            success_text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=ProductMenu.get_main_menu()
        )

        await animate_success(success_msg)
        await asyncio.sleep(1)
        await delete_messages(chat_id, temp_messages)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await delete_messages(chat_id, temp_messages)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏",
                           reply_markup=ProductMenu.get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_any_message(message: types.Message):
    text = message.text or ""
    url_match = OZON_LINK_RE.search(text)
    if url_match:
        url = url_match.group(0)
        chat_id = str(message.chat.id)
        user = message.from_user
        user_info = user_data.get(chat_id)
        temp_messages = []

        # –õ–∏–º–∏—Ç—ã –∏ –ø–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not user_info:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                                 reply_markup=ProductMenu.get_main_menu())
            return

        if len(user_info['urls']) >= MAX_URLS_PER_USER:
            await message.answer(f"‚ùå –õ–∏–º–∏—Ç {MAX_URLS_PER_USER} —Ç–æ–≤–∞—Ä–æ–≤!",
                                 reply_markup=ProductMenu.get_main_menu())
            return

        try:
            loading_msg = await message.answer("‚è≥ <i>–ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É‚Ä¶</i>", parse_mode="HTML")
            temp_messages.append(loading_msg.message_id)

            products_data = await batch_fetch_products([url])
            name, prices, full_sku, is_out_of_stock = products_data.get(url, (None, {}, None, True))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞
            if not full_sku:
                await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª!")
                await delete_messages(chat_id, temp_messages)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            dupe_reason = is_duplicate(url, full_sku, user_info)
            if dupe_reason:
                await loading_msg.edit_text(dupe_reason)
                temp_messages.append(loading_msg.message_id)
                await delete_messages(chat_id, temp_messages)
                return

            # –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
            if is_out_of_stock:
                await loading_msg.edit_text("üö´ –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
                temp_messages.append(loading_msg.message_id)
                await delete_messages(chat_id, temp_messages)
                return

            if not name or not prices:
                await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!")
                temp_messages.append(loading_msg.message_id)
                await delete_messages(chat_id, temp_messages)
                return

            # –£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            user_info.setdefault('urls', []).append(url)
            user_info.setdefault('product_names', {})[url] = name
            user_info.setdefault('previous_prices', {})[url] = prices
            user_info.setdefault('skus', {})[full_sku] = url
            user_info['last_active'] = datetime.now().isoformat()
            save_user_data()

            success_text = (
                f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
                f"üè∑ {name}\n"
                f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: <code>{full_sku}</code>\n"
                f"üíµ {get_price_display(prices)}‚ÇΩ\n"
                f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä</a>\n"
                f"‚è±Ô∏è –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: {format_interval(user_info.get('interval', DEFAULT_INTERVAL))}"
            )
            await message.answer(success_text, parse_mode="HTML", disable_web_page_preview=True,
                                reply_markup=ProductMenu.get_main_menu())
            await delete_messages(chat_id, temp_messages)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
                                 reply_markup=ProductMenu.get_main_menu())
    else:
        # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ Oz–æn –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —à—É–º–∞
        try:
            await bot.delete_message(message.chat.id, message.message_id)
        except Exception:
            pass

# =============================================
# –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ò –ó–ê–ü–£–°–ö
# =============================================

async def dynamic_interval_check():
    logger.info("=== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è (–ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã) –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω ===")
    now = datetime.now()
    for chat_id, user_info in user_data.items():
        if not user_info.get('is_tracking', True):
            continue
        if user_info.get('interval') != 0:
            continue

        last_check_str = user_info.get('last_check')
        last_check = datetime.fromisoformat(last_check_str) if last_check_str else None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 50 –º–∏–Ω—É—Ç
        if not last_check or (now - last_check) >= timedelta(minutes=25):
            logger.info(f"[dynamic] –ü—Ä–æ–≤–µ—Ä–∫–∞ {chat_id}, last_check='{last_check_str}'")
            await check_prices(chat_id)
            user_info['last_check'] = now.isoformat()
            save_user_data()


async def scheduled_price_check():
    logger.info("=== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω ===")
    now = datetime.now()
    for chat_id, user_info in user_data.items():
        if not user_info.get('is_tracking', True):
            continue

        interval = user_info.get('interval', DEFAULT_INTERVAL)
        if interval == 0:
            continue

        last_check_str = user_info.get('last_check')
        last_check = datetime.fromisoformat(last_check_str) if last_check_str else None

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –û–ñ–ò–î–ê–ï–ú–´–ô —á–µ–∫–ø–æ–∏–Ω—Ç
        if not last_check:
            # –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —Å—Ç–∞–≤–∏–º —Å–µ–π—á–∞—Å
            next_check = now
        else:
            next_check = last_check + timedelta(hours=interval)
            # –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º "–ø—Ä–æ—à–µ–¥—à–∏–µ" –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            while next_check + timedelta(hours=interval) <= now:
                next_check += timedelta(hours=interval)

        if not last_check or now >= next_check:
            logger.info(f"[scheduled] –ü—Ä–æ–≤–µ—Ä–∫–∞ {chat_id}, last_check='{last_check_str}', interval={interval}")
            await check_prices(chat_id)
            # —Å—Ç–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π —á–µ–∫–ø–æ–∏–Ω—Ç (–∞ –Ω–µ now! ‚Äî —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—Ä–∏—Ñ—Ç–∞)
            user_info['last_check'] = next_check.isoformat()
            save_user_data()



async def cleanup_inactive_users():
    threshold = datetime.now() - timedelta(days=INACTIVE_USER_THRESHOLD_DAYS)
    inactive_users = [
        chat_id for chat_id, user_info in user_data.items()
        if datetime.fromisoformat(user_info['last_active']) < threshold
    ]

    for chat_id in inactive_users:
        del user_data[chat_id]

    if inactive_users:
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(inactive_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        save_user_data()

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(scheduled_price_check, 'interval', minutes=10, jitter=30)

    scheduler.add_job(
        dynamic_interval_check,
        'interval',
        minutes=30,
        jitter=300
    )

    scheduler.add_job(cleanup_inactive_users, 'cron', hour=3)
    scheduler.add_job(update_skus, 'interval', hours=24)

    scheduler.start()

    dp = Dispatcher()
    dp.include_router(router)

    try:
        await dp.start_polling(bot)
    finally:
        scheduler.shutdown()
        save_user_data()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")